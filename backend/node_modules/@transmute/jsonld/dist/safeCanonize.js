"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeCanonize = void 0;
const jsonld_1 = __importDefault(require("jsonld"));
const json_pointer_1 = __importDefault(require("json-pointer"));
const isAbsoluteIri = (id) => {
    const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;
    return isAbsoluteRegex.test(id);
};
const validateIds = (object) => {
    const dict = json_pointer_1.default.dict(object);
    const errors = [];
    for (const [key, value] of Object.entries(dict)) {
        const keyToCheck = key.split("/").pop();
        if (keyToCheck === "@id" || keyToCheck === "id") {
            const isValidIRI = isAbsoluteIri(value);
            if (!isValidIRI) {
                errors.push(`Invalid JSON-LD ID at ${key}. Using this value would allow the data in the object to be mutable.`);
            }
        }
    }
    if (errors.length > 0) {
        throw new Error(JSON.stringify(errors));
    }
};
const safeCanonize = (input, { documentLoader, expansion, skipExpansion }) => __awaiter(void 0, void 0, void 0, function* () {
    validateIds(input);
    return jsonld_1.default.canonize(input, {
        algorithm: "URDNA2015",
        format: "application/n-quads",
        documentLoader,
        expansion,
        skipExpansion,
        useNative: false
    });
});
exports.safeCanonize = safeCanonize;
