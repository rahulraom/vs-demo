import jsonld from 'jsonld';
declare const _default: {
    safeCanonize: (input: jsonld.JsonLdDocument, { documentLoader, expansion, skipExpansion }: jsonld.Options.Normalize) => Promise<string>;
    compact(input: jsonld.JsonLdDocument, ctx: jsonld.ContextDefinition, options: jsonld.Options.Compact, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    compact(input: jsonld.JsonLdDocument, ctx: jsonld.ContextDefinition, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    compact(input: jsonld.JsonLdDocument, ctx?: jsonld.ContextDefinition | undefined, options?: jsonld.Options.Compact | undefined): Promise<jsonld.NodeObject>;
    expand(input: jsonld.JsonLdDocument, options: jsonld.Options.Expand, callback: (err: Error, res: import("jsonld/jsonld-spec").JsonLdArray) => void): void;
    expand(input: jsonld.JsonLdDocument, callback: (err: Error, res: import("jsonld/jsonld-spec").JsonLdArray) => void): void;
    expand(input: jsonld.JsonLdDocument, options?: jsonld.Options.Expand | undefined): Promise<import("jsonld/jsonld-spec").JsonLdArray>;
    flatten(input: jsonld.JsonLdDocument, ctx: jsonld.ContextDefinition | null, options: jsonld.Options.Common, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    flatten(input: jsonld.JsonLdDocument, ctx: jsonld.ContextDefinition | null, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    flatten(input: jsonld.JsonLdDocument, ctx?: jsonld.ContextDefinition | undefined, options?: jsonld.Options.Common | undefined): Promise<jsonld.NodeObject>;
    frame(input: jsonld.JsonLdDocument, frame: import("jsonld/jsonld-spec").Frame, options: jsonld.Options.Frame, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    frame(input: jsonld.JsonLdDocument, frame: import("jsonld/jsonld-spec").Frame, callback: (err: Error, res: jsonld.NodeObject) => void): void;
    frame(input: jsonld.JsonLdDocument, frame: import("jsonld/jsonld-spec").Frame, options?: jsonld.Options.Frame | undefined): Promise<jsonld.NodeObject>;
    normalize(input: jsonld.JsonLdDocument, options: jsonld.Options.Normalize, callback: (err: Error, res: string) => void): void;
    normalize(input: jsonld.JsonLdDocument, callback: (err: Error, res: string) => void): void;
    normalize(input: jsonld.JsonLdDocument, options?: jsonld.Options.Normalize | undefined): Promise<string>;
    fromRDF(dataset: object, options: jsonld.Options.FromRdf, callback: (err: Error, res: import("jsonld/jsonld-spec").JsonLdArray) => void): void;
    fromRDF(dataset: object, callback: (err: Error, res: import("jsonld/jsonld-spec").JsonLdArray) => void): void;
    fromRDF(dataset: object, options?: jsonld.Options.FromRdf | undefined): Promise<import("jsonld/jsonld-spec").JsonLdArray>;
    toRDF(input: jsonld.JsonLdDocument, callback: (err: Error, res: object) => void): void;
    toRDF(input: jsonld.JsonLdDocument, options: jsonld.Options.ToRdf, callback: (err: Error, res: object) => void): void;
    toRDF(input: jsonld.JsonLdDocument, options?: jsonld.Options.ToRdf | undefined): Promise<object>;
    canonize: typeof jsonld.normalize;
    JsonLdProcessor: import("jsonld/jsonld-spec").JsonLdProcessor;
};
export default _default;
